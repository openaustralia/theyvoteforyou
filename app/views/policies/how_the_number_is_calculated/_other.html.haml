%p
  The MP's votes count towards a weighted average where the most important votes get
  #{pluralize(Distance.possible_points[:samestrong], "point")},
  less important votes get
  #{pluralize(Distance.possible_points[:same], "point")},
  and less important votes for which the MP was absent get
  #{pluralize(Distance.possible_points[:absent], "point")}.
  In important votes the MP gets awarded the full
  = pluralize(Distance.points[:samestrong], "point")
  for voting the same as the policy,
  = pluralize(Distance.points[:differstrong], "point")
  for voting against the policy, and
  = pluralize(Distance.points[:absentstrong], "point")
  for not voting. In less important votes, the MP gets
  = pluralize(Distance.points[:same], "point")
  for voting with the policy,
  = pluralize(Distance.points[:differ], "point")
  for voting against, and
  = Distance.points[:absent]
  (out of #{Distance.possible_points[:absent]})
  if absent.

%p
  Then, the number gets converted to a simple english language phrase based on the range of values it's within.

%table.table
  %thead
    %tr.headings
      %th
      %th No of votes
      %th Points
      %th Out of
  %tbody
    %tr
      %th Most important votes (#{pluralize(Distance.possible_points[:samestrong], "point")})
      %td &nbsp;
      %td &nbsp;
      %td &nbsp;
    %tr
      %td MP voted with policy
      %td= policy_person_distance.nvotessamestrong
      %td= policy_person_distance.votes_same_strong_points
      %td= policy_person_distance.possible_same_strong_points
    %tr
      %td MP voted against policy
      %td= policy_person_distance.nvotesdifferstrong
      %td= policy_person_distance.votes_differ_strong_points
      %td= policy_person_distance.possible_differ_strong_points
    %tr
      %td MP absent
      %td= policy_person_distance.nvotesabsentstrong
      %td= policy_person_distance.votes_absent_strong_points
      %td= policy_person_distance.possible_absent_strong_points
    %tr
      %th Less important votes (#{pluralize(Distance.possible_points[:same], "point")})
      %td &nbsp;
      %td &nbsp;
      %td &nbsp;
    %tr
      %td MP voted with policy
      %td= policy_person_distance.nvotessame
      %td= policy_person_distance.votes_same_points
      %td= policy_person_distance.possible_same_points
    %tr
      %td MP voted against policy
      %td= policy_person_distance.nvotesdiffer
      %td= policy_person_distance.votes_differ_points
      %td= policy_person_distance.possible_differ_points
    %tr
      %th Less important absentees (#{pluralize(Distance.possible_points[:absent], "point")})
      %td &nbsp;
      %td &nbsp;
      %td &nbsp;
    %tr
      %td MP absent*
      %td= policy_person_distance.nvotesabsent
      %td= policy_person_distance.votes_absent_points
      %td= policy_person_distance.possible_absent_points
    %tr
      %th{colspan: "2"} Total:
      %td= policy_person_distance.total_points
      %td= policy_person_distance.possible_total_points
    %tr
      %td{colspan: "4"}
        %p
          *Pressure of other work means MPs or
          Senators are not always available to vote â€“ it does not always
          indicate they have abstained. Therefore, being absent on a less
          important vote makes a disproportionatly small
          difference.
%p
  Agreement score = MP's points / total points
  \= #{policy_person_distance.total_points} / #{policy_person_distance.possible_total_points}
  \=
  = succeed "." do
    %b= fraction_to_percentage_display(policy_person_distance.agreement_fraction)

%p
  And then

%ul
  - PolicyPersonDistance.category_range_mapping.each do |category, range|
    %li
      between
      = fraction_to_percentage_display(range.min)
      and
      = fraction_to_percentage_display(range.max)
      becomes
      "#{category_words_sentence(category)}"
